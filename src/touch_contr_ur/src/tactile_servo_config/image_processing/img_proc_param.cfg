#!/usr/bin/env python
PACKAGE = "tactile_servo_config"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#     Name            Type    Reconfi-    Description      Default  Min  Max
#			    guration level 		
gen.add("noise_threshold",    int_t,    0, "threshold to binarize image", 10,  0, 255)
gen.add("coc_threshold",    int_t,    0, "coc_threshold", 10,  0, 255)
gen.add("pres_from_image",    double_t,    0, "pres_from_image", 27,  0, 999999999)
gen.add("force_from_area",    double_t,    0, "force", 20000.0,  0, 999999999)
gen.add("torque_from_image_y",    double_t,    0, "torque_from_image_y", 25,  0, 999999999)
gen.add("torque_from_image_x",    double_t,    0, "torque_from_image_x", 25,  0, 999999999)
gen.add("compare_eigens",    int_t,    0, "compare_eigens", 5,  0, 255)
gen.add("filter_length",    double_t,    0, "filter_feats", 15.0,  0, 100)
gen.add("coc2zmp_begin_num_pixels",    int_t,    0, "No pix to begin to smooth trans", 7,  0, 84)
gen.add("coc2zmp_end_num_pixels",    int_t,    0, "No pix to end to smooth trans", 15,  0, 84)
gen.add("coc2zmp_pixels2smoothtrans",    double_t,    0, "for scaling No_pix to smooth", 0.025,  -9999, 9999)
 
gen.add("improc_bin_thresh",    int_t,    0, "binarize", 10,  0, 255)
gen.add("improc_filter_length_features",    int_t,    0, "filter_length_features", 30,  0, 255)
gen.add("find_contour_mode_name",    str_t,    0, "Contour retrieval mode:CV_RETR_EXTERNAL,CV_RETR_LIST,CV_RETR_CCOMP,CV_RETR_TREE",  "CV_RETR_EXTERNAL")
gen.add("find_contour_method_name",    str_t,    0, "Contour approximation method:CV_CHAIN_APPROX_NONE,CV_CHAIN_APPROX_SIMPLE",  "CV_CHAIN_APPROX_SIMPLE")
gen.add("improc_approx_epsilon",    double_t,    0, "Parameter specifying the approximation accuracy. This is the maximum distance between the original curve and its approximation.", 1,  0.01, 10000)
gen.add("force_scale",    double_t,    0, "force_scale", 20000,  1, 999999999)
gen.add("improc_area_thresh",    int_t,    0, "threshold for contact area", 14,  0, 2000)
gen.add("improc_scaling_factor",    int_t,    0, "scaling_factor", 30,  0, 2000)

exit(gen.generate(PACKAGE, "image_proc_node", "img_proc_params"))
