// Generated by gencpp from file tactile_servo_srvs/pose_arm_initResponse.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_SRVS_MESSAGE_POSE_ARM_INITRESPONSE_H
#define TACTILE_SERVO_SRVS_MESSAGE_POSE_ARM_INITRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tactile_servo_srvs
{
template <class ContainerAllocator>
struct pose_arm_initResponse_
{
  typedef pose_arm_initResponse_<ContainerAllocator> Type;

  pose_arm_initResponse_()
    : initialized(false)  {
    }
  pose_arm_initResponse_(const ContainerAllocator& _alloc)
    : initialized(false)  {
  (void)_alloc;
    }



   typedef uint8_t _initialized_type;
  _initialized_type initialized;





  typedef boost::shared_ptr< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pose_arm_initResponse_

typedef ::tactile_servo_srvs::pose_arm_initResponse_<std::allocator<void> > pose_arm_initResponse;

typedef boost::shared_ptr< ::tactile_servo_srvs::pose_arm_initResponse > pose_arm_initResponsePtr;
typedef boost::shared_ptr< ::tactile_servo_srvs::pose_arm_initResponse const> pose_arm_initResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator1> & lhs, const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator2> & rhs)
{
  return lhs.initialized == rhs.initialized;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator1> & lhs, const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02c180b526010e14bcf346a656b3133c";
  }

  static const char* value(const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02c180b526010e14ULL;
  static const uint64_t static_value2 = 0xbcf346a656b3133cULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_srvs/pose_arm_initResponse";
  }

  static const char* value(const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool initialized\n"
"\n"
;
  }

  static const char* value(const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initialized);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_arm_initResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_srvs::pose_arm_initResponse_<ContainerAllocator>& v)
  {
    s << indent << "initialized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initialized);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_SRVS_MESSAGE_POSE_ARM_INITRESPONSE_H
