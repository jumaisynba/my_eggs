# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tactile_servo_msgs/PlotMatlabImg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PlotMatlabImg(genpy.Message):
  _md5sum = "4ee7a297cb920cbf51bd3172311d37db"
  _type = "tactile_servo_msgs/PlotMatlabImg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 fx
float64 fy
float64 fz
float64 fwx
float64 fwy
float64 fwz
float64 coc_x
float64 coc_y
float64 f
float64 zmp_x
float64 zmp_y
float64 orient_z
float64 cop_x
float64 cop_y
float64 coc_xd
float64 coc_yd
float64 fd
float64 zmp_xd
float64 zmp_yd
float64 orient_zd
float64 cop_xd
float64 cop_yd
int32 num_contours
float64 x_now
float64 y_now
float64 z_now
float64 wx_now
float64 wy_now
float64 wz_now
float64 ww_now
float64 x_des
float64 y_des
float64 z_des
float64 wx_des
float64 wy_des
float64 wz_des
float64 ww_des
float64 x_c
float64 y_c
float64 z_c
float64 dt
float64 time
float64 test_time2
float64[] img # actual matrix data, size is (step * rows)
bool    is_in_contact_ur 
int32    pixels_in_contact_ur
float64    highest_force_cell_ur 
float64    real_total_force_ur
float64    current_state_ur
float64[] joint_angles
float64[] joint_efforts
float64 x_c1
float64 y_c1
float64 z_c1
float64 x_c2
float64 y_c2
float64 z_c2
float64 x_c3
float64 y_c3
float64 z_c3
float64 x_c4
float64 y_c4
float64 z_c4
float64 x_c5
float64 y_c5
float64 z_c5
float64 x_c6
float64 y_c6
float64 z_c6
float64 x_c7
float64 y_c7
float64 z_c7
float64 x_c8
float64 y_c8
float64 z_c8
float64 x_c9
float64 y_c9
float64 z_c9
float64 x_c10
float64 y_c10
float64 z_c10
float64 x_c11
float64 y_c11
float64 z_c11
float64 x_c12
float64 y_c12
float64 z_c12
float64 x_c13
float64 y_c13
float64 z_c13
float64 x_c14
float64 y_c14
float64 z_c14
float64 x_c15
float64 y_c15
float64 z_c15

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','fx','fy','fz','fwx','fwy','fwz','coc_x','coc_y','f','zmp_x','zmp_y','orient_z','cop_x','cop_y','coc_xd','coc_yd','fd','zmp_xd','zmp_yd','orient_zd','cop_xd','cop_yd','num_contours','x_now','y_now','z_now','wx_now','wy_now','wz_now','ww_now','x_des','y_des','z_des','wx_des','wy_des','wz_des','ww_des','x_c','y_c','z_c','dt','time','test_time2','img','is_in_contact_ur','pixels_in_contact_ur','highest_force_cell_ur','real_total_force_ur','current_state_ur','joint_angles','joint_efforts','x_c1','y_c1','z_c1','x_c2','y_c2','z_c2','x_c3','y_c3','z_c3','x_c4','y_c4','z_c4','x_c5','y_c5','z_c5','x_c6','y_c6','z_c6','x_c7','y_c7','z_c7','x_c8','y_c8','z_c8','x_c9','y_c9','z_c9','x_c10','y_c10','z_c10','x_c11','y_c11','z_c11','x_c12','y_c12','z_c12','x_c13','y_c13','z_c13','x_c14','y_c14','z_c14','x_c15','y_c15','z_c15']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64[]','bool','int32','float64','float64','float64','float64[]','float64[]','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fx,fy,fz,fwx,fwy,fwz,coc_x,coc_y,f,zmp_x,zmp_y,orient_z,cop_x,cop_y,coc_xd,coc_yd,fd,zmp_xd,zmp_yd,orient_zd,cop_xd,cop_yd,num_contours,x_now,y_now,z_now,wx_now,wy_now,wz_now,ww_now,x_des,y_des,z_des,wx_des,wy_des,wz_des,ww_des,x_c,y_c,z_c,dt,time,test_time2,img,is_in_contact_ur,pixels_in_contact_ur,highest_force_cell_ur,real_total_force_ur,current_state_ur,joint_angles,joint_efforts,x_c1,y_c1,z_c1,x_c2,y_c2,z_c2,x_c3,y_c3,z_c3,x_c4,y_c4,z_c4,x_c5,y_c5,z_c5,x_c6,y_c6,z_c6,x_c7,y_c7,z_c7,x_c8,y_c8,z_c8,x_c9,y_c9,z_c9,x_c10,y_c10,z_c10,x_c11,y_c11,z_c11,x_c12,y_c12,z_c12,x_c13,y_c13,z_c13,x_c14,y_c14,z_c14,x_c15,y_c15,z_c15

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlotMatlabImg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.fz is None:
        self.fz = 0.
      if self.fwx is None:
        self.fwx = 0.
      if self.fwy is None:
        self.fwy = 0.
      if self.fwz is None:
        self.fwz = 0.
      if self.coc_x is None:
        self.coc_x = 0.
      if self.coc_y is None:
        self.coc_y = 0.
      if self.f is None:
        self.f = 0.
      if self.zmp_x is None:
        self.zmp_x = 0.
      if self.zmp_y is None:
        self.zmp_y = 0.
      if self.orient_z is None:
        self.orient_z = 0.
      if self.cop_x is None:
        self.cop_x = 0.
      if self.cop_y is None:
        self.cop_y = 0.
      if self.coc_xd is None:
        self.coc_xd = 0.
      if self.coc_yd is None:
        self.coc_yd = 0.
      if self.fd is None:
        self.fd = 0.
      if self.zmp_xd is None:
        self.zmp_xd = 0.
      if self.zmp_yd is None:
        self.zmp_yd = 0.
      if self.orient_zd is None:
        self.orient_zd = 0.
      if self.cop_xd is None:
        self.cop_xd = 0.
      if self.cop_yd is None:
        self.cop_yd = 0.
      if self.num_contours is None:
        self.num_contours = 0
      if self.x_now is None:
        self.x_now = 0.
      if self.y_now is None:
        self.y_now = 0.
      if self.z_now is None:
        self.z_now = 0.
      if self.wx_now is None:
        self.wx_now = 0.
      if self.wy_now is None:
        self.wy_now = 0.
      if self.wz_now is None:
        self.wz_now = 0.
      if self.ww_now is None:
        self.ww_now = 0.
      if self.x_des is None:
        self.x_des = 0.
      if self.y_des is None:
        self.y_des = 0.
      if self.z_des is None:
        self.z_des = 0.
      if self.wx_des is None:
        self.wx_des = 0.
      if self.wy_des is None:
        self.wy_des = 0.
      if self.wz_des is None:
        self.wz_des = 0.
      if self.ww_des is None:
        self.ww_des = 0.
      if self.x_c is None:
        self.x_c = 0.
      if self.y_c is None:
        self.y_c = 0.
      if self.z_c is None:
        self.z_c = 0.
      if self.dt is None:
        self.dt = 0.
      if self.time is None:
        self.time = 0.
      if self.test_time2 is None:
        self.test_time2 = 0.
      if self.img is None:
        self.img = []
      if self.is_in_contact_ur is None:
        self.is_in_contact_ur = False
      if self.pixels_in_contact_ur is None:
        self.pixels_in_contact_ur = 0
      if self.highest_force_cell_ur is None:
        self.highest_force_cell_ur = 0.
      if self.real_total_force_ur is None:
        self.real_total_force_ur = 0.
      if self.current_state_ur is None:
        self.current_state_ur = 0.
      if self.joint_angles is None:
        self.joint_angles = []
      if self.joint_efforts is None:
        self.joint_efforts = []
      if self.x_c1 is None:
        self.x_c1 = 0.
      if self.y_c1 is None:
        self.y_c1 = 0.
      if self.z_c1 is None:
        self.z_c1 = 0.
      if self.x_c2 is None:
        self.x_c2 = 0.
      if self.y_c2 is None:
        self.y_c2 = 0.
      if self.z_c2 is None:
        self.z_c2 = 0.
      if self.x_c3 is None:
        self.x_c3 = 0.
      if self.y_c3 is None:
        self.y_c3 = 0.
      if self.z_c3 is None:
        self.z_c3 = 0.
      if self.x_c4 is None:
        self.x_c4 = 0.
      if self.y_c4 is None:
        self.y_c4 = 0.
      if self.z_c4 is None:
        self.z_c4 = 0.
      if self.x_c5 is None:
        self.x_c5 = 0.
      if self.y_c5 is None:
        self.y_c5 = 0.
      if self.z_c5 is None:
        self.z_c5 = 0.
      if self.x_c6 is None:
        self.x_c6 = 0.
      if self.y_c6 is None:
        self.y_c6 = 0.
      if self.z_c6 is None:
        self.z_c6 = 0.
      if self.x_c7 is None:
        self.x_c7 = 0.
      if self.y_c7 is None:
        self.y_c7 = 0.
      if self.z_c7 is None:
        self.z_c7 = 0.
      if self.x_c8 is None:
        self.x_c8 = 0.
      if self.y_c8 is None:
        self.y_c8 = 0.
      if self.z_c8 is None:
        self.z_c8 = 0.
      if self.x_c9 is None:
        self.x_c9 = 0.
      if self.y_c9 is None:
        self.y_c9 = 0.
      if self.z_c9 is None:
        self.z_c9 = 0.
      if self.x_c10 is None:
        self.x_c10 = 0.
      if self.y_c10 is None:
        self.y_c10 = 0.
      if self.z_c10 is None:
        self.z_c10 = 0.
      if self.x_c11 is None:
        self.x_c11 = 0.
      if self.y_c11 is None:
        self.y_c11 = 0.
      if self.z_c11 is None:
        self.z_c11 = 0.
      if self.x_c12 is None:
        self.x_c12 = 0.
      if self.y_c12 is None:
        self.y_c12 = 0.
      if self.z_c12 is None:
        self.z_c12 = 0.
      if self.x_c13 is None:
        self.x_c13 = 0.
      if self.y_c13 is None:
        self.y_c13 = 0.
      if self.z_c13 is None:
        self.z_c13 = 0.
      if self.x_c14 is None:
        self.x_c14 = 0.
      if self.y_c14 is None:
        self.y_c14 = 0.
      if self.z_c14 is None:
        self.z_c14 = 0.
      if self.x_c15 is None:
        self.x_c15 = 0.
      if self.y_c15 is None:
        self.y_c15 = 0.
      if self.z_c15 is None:
        self.z_c15 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.fx = 0.
      self.fy = 0.
      self.fz = 0.
      self.fwx = 0.
      self.fwy = 0.
      self.fwz = 0.
      self.coc_x = 0.
      self.coc_y = 0.
      self.f = 0.
      self.zmp_x = 0.
      self.zmp_y = 0.
      self.orient_z = 0.
      self.cop_x = 0.
      self.cop_y = 0.
      self.coc_xd = 0.
      self.coc_yd = 0.
      self.fd = 0.
      self.zmp_xd = 0.
      self.zmp_yd = 0.
      self.orient_zd = 0.
      self.cop_xd = 0.
      self.cop_yd = 0.
      self.num_contours = 0
      self.x_now = 0.
      self.y_now = 0.
      self.z_now = 0.
      self.wx_now = 0.
      self.wy_now = 0.
      self.wz_now = 0.
      self.ww_now = 0.
      self.x_des = 0.
      self.y_des = 0.
      self.z_des = 0.
      self.wx_des = 0.
      self.wy_des = 0.
      self.wz_des = 0.
      self.ww_des = 0.
      self.x_c = 0.
      self.y_c = 0.
      self.z_c = 0.
      self.dt = 0.
      self.time = 0.
      self.test_time2 = 0.
      self.img = []
      self.is_in_contact_ur = False
      self.pixels_in_contact_ur = 0
      self.highest_force_cell_ur = 0.
      self.real_total_force_ur = 0.
      self.current_state_ur = 0.
      self.joint_angles = []
      self.joint_efforts = []
      self.x_c1 = 0.
      self.y_c1 = 0.
      self.z_c1 = 0.
      self.x_c2 = 0.
      self.y_c2 = 0.
      self.z_c2 = 0.
      self.x_c3 = 0.
      self.y_c3 = 0.
      self.z_c3 = 0.
      self.x_c4 = 0.
      self.y_c4 = 0.
      self.z_c4 = 0.
      self.x_c5 = 0.
      self.y_c5 = 0.
      self.z_c5 = 0.
      self.x_c6 = 0.
      self.y_c6 = 0.
      self.z_c6 = 0.
      self.x_c7 = 0.
      self.y_c7 = 0.
      self.z_c7 = 0.
      self.x_c8 = 0.
      self.y_c8 = 0.
      self.z_c8 = 0.
      self.x_c9 = 0.
      self.y_c9 = 0.
      self.z_c9 = 0.
      self.x_c10 = 0.
      self.y_c10 = 0.
      self.z_c10 = 0.
      self.x_c11 = 0.
      self.y_c11 = 0.
      self.z_c11 = 0.
      self.x_c12 = 0.
      self.y_c12 = 0.
      self.z_c12 = 0.
      self.x_c13 = 0.
      self.y_c13 = 0.
      self.z_c13 = 0.
      self.x_c14 = 0.
      self.y_c14 = 0.
      self.z_c14 = 0.
      self.x_c15 = 0.
      self.y_c15 = 0.
      self.z_c15 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22di20d().pack(_x.fx, _x.fy, _x.fz, _x.fwx, _x.fwy, _x.fwz, _x.coc_x, _x.coc_y, _x.f, _x.zmp_x, _x.zmp_y, _x.orient_z, _x.cop_x, _x.cop_y, _x.coc_xd, _x.coc_yd, _x.fd, _x.zmp_xd, _x.zmp_yd, _x.orient_zd, _x.cop_xd, _x.cop_yd, _x.num_contours, _x.x_now, _x.y_now, _x.z_now, _x.wx_now, _x.wy_now, _x.wz_now, _x.ww_now, _x.x_des, _x.y_des, _x.z_des, _x.wx_des, _x.wy_des, _x.wz_des, _x.ww_des, _x.x_c, _x.y_c, _x.z_c, _x.dt, _x.time, _x.test_time2))
      length = len(self.img)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.img))
      _x = self
      buff.write(_get_struct_Bi3d().pack(_x.is_in_contact_ur, _x.pixels_in_contact_ur, _x.highest_force_cell_ur, _x.real_total_force_ur, _x.current_state_ur))
      length = len(self.joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_angles))
      length = len(self.joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_efforts))
      _x = self
      buff.write(_get_struct_45d().pack(_x.x_c1, _x.y_c1, _x.z_c1, _x.x_c2, _x.y_c2, _x.z_c2, _x.x_c3, _x.y_c3, _x.z_c3, _x.x_c4, _x.y_c4, _x.z_c4, _x.x_c5, _x.y_c5, _x.z_c5, _x.x_c6, _x.y_c6, _x.z_c6, _x.x_c7, _x.y_c7, _x.z_c7, _x.x_c8, _x.y_c8, _x.z_c8, _x.x_c9, _x.y_c9, _x.z_c9, _x.x_c10, _x.y_c10, _x.z_c10, _x.x_c11, _x.y_c11, _x.z_c11, _x.x_c12, _x.y_c12, _x.z_c12, _x.x_c13, _x.y_c13, _x.z_c13, _x.x_c14, _x.y_c14, _x.z_c14, _x.x_c15, _x.y_c15, _x.z_c15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 340
      (_x.fx, _x.fy, _x.fz, _x.fwx, _x.fwy, _x.fwz, _x.coc_x, _x.coc_y, _x.f, _x.zmp_x, _x.zmp_y, _x.orient_z, _x.cop_x, _x.cop_y, _x.coc_xd, _x.coc_yd, _x.fd, _x.zmp_xd, _x.zmp_yd, _x.orient_zd, _x.cop_xd, _x.cop_yd, _x.num_contours, _x.x_now, _x.y_now, _x.z_now, _x.wx_now, _x.wy_now, _x.wz_now, _x.ww_now, _x.x_des, _x.y_des, _x.z_des, _x.wx_des, _x.wy_des, _x.wz_des, _x.ww_des, _x.x_c, _x.y_c, _x.z_c, _x.dt, _x.time, _x.test_time2,) = _get_struct_22di20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img = s.unpack(str[start:end])
      _x = self
      start = end
      end += 29
      (_x.is_in_contact_ur, _x.pixels_in_contact_ur, _x.highest_force_cell_ur, _x.real_total_force_ur, _x.current_state_ur,) = _get_struct_Bi3d().unpack(str[start:end])
      self.is_in_contact_ur = bool(self.is_in_contact_ur)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_angles = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_efforts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 360
      (_x.x_c1, _x.y_c1, _x.z_c1, _x.x_c2, _x.y_c2, _x.z_c2, _x.x_c3, _x.y_c3, _x.z_c3, _x.x_c4, _x.y_c4, _x.z_c4, _x.x_c5, _x.y_c5, _x.z_c5, _x.x_c6, _x.y_c6, _x.z_c6, _x.x_c7, _x.y_c7, _x.z_c7, _x.x_c8, _x.y_c8, _x.z_c8, _x.x_c9, _x.y_c9, _x.z_c9, _x.x_c10, _x.y_c10, _x.z_c10, _x.x_c11, _x.y_c11, _x.z_c11, _x.x_c12, _x.y_c12, _x.z_c12, _x.x_c13, _x.y_c13, _x.z_c13, _x.x_c14, _x.y_c14, _x.z_c14, _x.x_c15, _x.y_c15, _x.z_c15,) = _get_struct_45d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22di20d().pack(_x.fx, _x.fy, _x.fz, _x.fwx, _x.fwy, _x.fwz, _x.coc_x, _x.coc_y, _x.f, _x.zmp_x, _x.zmp_y, _x.orient_z, _x.cop_x, _x.cop_y, _x.coc_xd, _x.coc_yd, _x.fd, _x.zmp_xd, _x.zmp_yd, _x.orient_zd, _x.cop_xd, _x.cop_yd, _x.num_contours, _x.x_now, _x.y_now, _x.z_now, _x.wx_now, _x.wy_now, _x.wz_now, _x.ww_now, _x.x_des, _x.y_des, _x.z_des, _x.wx_des, _x.wy_des, _x.wz_des, _x.ww_des, _x.x_c, _x.y_c, _x.z_c, _x.dt, _x.time, _x.test_time2))
      length = len(self.img)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.img.tostring())
      _x = self
      buff.write(_get_struct_Bi3d().pack(_x.is_in_contact_ur, _x.pixels_in_contact_ur, _x.highest_force_cell_ur, _x.real_total_force_ur, _x.current_state_ur))
      length = len(self.joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_angles.tostring())
      length = len(self.joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_efforts.tostring())
      _x = self
      buff.write(_get_struct_45d().pack(_x.x_c1, _x.y_c1, _x.z_c1, _x.x_c2, _x.y_c2, _x.z_c2, _x.x_c3, _x.y_c3, _x.z_c3, _x.x_c4, _x.y_c4, _x.z_c4, _x.x_c5, _x.y_c5, _x.z_c5, _x.x_c6, _x.y_c6, _x.z_c6, _x.x_c7, _x.y_c7, _x.z_c7, _x.x_c8, _x.y_c8, _x.z_c8, _x.x_c9, _x.y_c9, _x.z_c9, _x.x_c10, _x.y_c10, _x.z_c10, _x.x_c11, _x.y_c11, _x.z_c11, _x.x_c12, _x.y_c12, _x.z_c12, _x.x_c13, _x.y_c13, _x.z_c13, _x.x_c14, _x.y_c14, _x.z_c14, _x.x_c15, _x.y_c15, _x.z_c15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 340
      (_x.fx, _x.fy, _x.fz, _x.fwx, _x.fwy, _x.fwz, _x.coc_x, _x.coc_y, _x.f, _x.zmp_x, _x.zmp_y, _x.orient_z, _x.cop_x, _x.cop_y, _x.coc_xd, _x.coc_yd, _x.fd, _x.zmp_xd, _x.zmp_yd, _x.orient_zd, _x.cop_xd, _x.cop_yd, _x.num_contours, _x.x_now, _x.y_now, _x.z_now, _x.wx_now, _x.wy_now, _x.wz_now, _x.ww_now, _x.x_des, _x.y_des, _x.z_des, _x.wx_des, _x.wy_des, _x.wz_des, _x.ww_des, _x.x_c, _x.y_c, _x.z_c, _x.dt, _x.time, _x.test_time2,) = _get_struct_22di20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 29
      (_x.is_in_contact_ur, _x.pixels_in_contact_ur, _x.highest_force_cell_ur, _x.real_total_force_ur, _x.current_state_ur,) = _get_struct_Bi3d().unpack(str[start:end])
      self.is_in_contact_ur = bool(self.is_in_contact_ur)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_efforts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 360
      (_x.x_c1, _x.y_c1, _x.z_c1, _x.x_c2, _x.y_c2, _x.z_c2, _x.x_c3, _x.y_c3, _x.z_c3, _x.x_c4, _x.y_c4, _x.z_c4, _x.x_c5, _x.y_c5, _x.z_c5, _x.x_c6, _x.y_c6, _x.z_c6, _x.x_c7, _x.y_c7, _x.z_c7, _x.x_c8, _x.y_c8, _x.z_c8, _x.x_c9, _x.y_c9, _x.z_c9, _x.x_c10, _x.y_c10, _x.z_c10, _x.x_c11, _x.y_c11, _x.z_c11, _x.x_c12, _x.y_c12, _x.z_c12, _x.x_c13, _x.y_c13, _x.z_c13, _x.x_c14, _x.y_c14, _x.z_c14, _x.x_c15, _x.y_c15, _x.z_c15,) = _get_struct_45d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_22di20d = None
def _get_struct_22di20d():
    global _struct_22di20d
    if _struct_22di20d is None:
        _struct_22di20d = struct.Struct("<22di20d")
    return _struct_22di20d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_45d = None
def _get_struct_45d():
    global _struct_45d
    if _struct_45d is None:
        _struct_45d = struct.Struct("<45d")
    return _struct_45d
_struct_Bi3d = None
def _get_struct_Bi3d():
    global _struct_Bi3d
    if _struct_Bi3d is None:
        _struct_Bi3d = struct.Struct("<Bi3d")
    return _struct_Bi3d
