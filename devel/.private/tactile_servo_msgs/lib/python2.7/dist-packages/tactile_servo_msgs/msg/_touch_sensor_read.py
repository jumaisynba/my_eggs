# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tactile_servo_msgs/touch_sensor_read.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class touch_sensor_read(genpy.Message):
  _md5sum = "4df8b4ab4ecaf13d960bd76650e851a5"
  _type = "tactile_servo_msgs/touch_sensor_read"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Custome Analog input message
Header header
float32 a0
float32 a1
float32 a2
float32 a3
float32 a4
float32 a5
float32 a6
float32 a7
float32 a8
float32 a9
float32 a10
float32 a11
float32 a12
float32 a13
float32 a14
float32 a15
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','a0','a1','a2','a3','a4','a5','a6','a7','a8','a9','a10','a11','a12','a13','a14','a15']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(touch_sensor_read, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.a0 is None:
        self.a0 = 0.
      if self.a1 is None:
        self.a1 = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.a3 is None:
        self.a3 = 0.
      if self.a4 is None:
        self.a4 = 0.
      if self.a5 is None:
        self.a5 = 0.
      if self.a6 is None:
        self.a6 = 0.
      if self.a7 is None:
        self.a7 = 0.
      if self.a8 is None:
        self.a8 = 0.
      if self.a9 is None:
        self.a9 = 0.
      if self.a10 is None:
        self.a10 = 0.
      if self.a11 is None:
        self.a11 = 0.
      if self.a12 is None:
        self.a12 = 0.
      if self.a13 is None:
        self.a13 = 0.
      if self.a14 is None:
        self.a14 = 0.
      if self.a15 is None:
        self.a15 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.a0 = 0.
      self.a1 = 0.
      self.a2 = 0.
      self.a3 = 0.
      self.a4 = 0.
      self.a5 = 0.
      self.a6 = 0.
      self.a7 = 0.
      self.a8 = 0.
      self.a9 = 0.
      self.a10 = 0.
      self.a11 = 0.
      self.a12 = 0.
      self.a13 = 0.
      self.a14 = 0.
      self.a15 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16f().pack(_x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.a6, _x.a7, _x.a8, _x.a9, _x.a10, _x.a11, _x.a12, _x.a13, _x.a14, _x.a15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.a6, _x.a7, _x.a8, _x.a9, _x.a10, _x.a11, _x.a12, _x.a13, _x.a14, _x.a15,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16f().pack(_x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.a6, _x.a7, _x.a8, _x.a9, _x.a10, _x.a11, _x.a12, _x.a13, _x.a14, _x.a15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.a6, _x.a7, _x.a8, _x.a9, _x.a10, _x.a11, _x.a12, _x.a13, _x.a14, _x.a15,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
