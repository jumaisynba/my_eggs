# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tactile_servo_msgs/CalibSerieselOptoforce.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CalibSerieselOptoforce(genpy.Message):
  _md5sum = "89487ec7fb2ca7040c7708621b61dd21"
  _type = "tactile_servo_msgs/CalibSerieselOptoforce"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint16 adc0
uint16 adc1
uint16 adc2
uint16 adc3
uint16 adc4
uint16 adc5
uint16 adc6
uint16 adc7
uint16 adc8
uint16 adc9
uint16 adc10
uint16 adc11
uint16 adc12
uint16 adc13
uint16 adc14
uint16 adc15
geometry_msgs/Wrench nano
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','adc0','adc1','adc2','adc3','adc4','adc5','adc6','adc7','adc8','adc9','adc10','adc11','adc12','adc13','adc14','adc15','nano']
  _slot_types = ['std_msgs/Header','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','geometry_msgs/Wrench']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,adc0,adc1,adc2,adc3,adc4,adc5,adc6,adc7,adc8,adc9,adc10,adc11,adc12,adc13,adc14,adc15,nano

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibSerieselOptoforce, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adc0 is None:
        self.adc0 = 0
      if self.adc1 is None:
        self.adc1 = 0
      if self.adc2 is None:
        self.adc2 = 0
      if self.adc3 is None:
        self.adc3 = 0
      if self.adc4 is None:
        self.adc4 = 0
      if self.adc5 is None:
        self.adc5 = 0
      if self.adc6 is None:
        self.adc6 = 0
      if self.adc7 is None:
        self.adc7 = 0
      if self.adc8 is None:
        self.adc8 = 0
      if self.adc9 is None:
        self.adc9 = 0
      if self.adc10 is None:
        self.adc10 = 0
      if self.adc11 is None:
        self.adc11 = 0
      if self.adc12 is None:
        self.adc12 = 0
      if self.adc13 is None:
        self.adc13 = 0
      if self.adc14 is None:
        self.adc14 = 0
      if self.adc15 is None:
        self.adc15 = 0
      if self.nano is None:
        self.nano = geometry_msgs.msg.Wrench()
    else:
      self.header = std_msgs.msg.Header()
      self.adc0 = 0
      self.adc1 = 0
      self.adc2 = 0
      self.adc3 = 0
      self.adc4 = 0
      self.adc5 = 0
      self.adc6 = 0
      self.adc7 = 0
      self.adc8 = 0
      self.adc9 = 0
      self.adc10 = 0
      self.adc11 = 0
      self.adc12 = 0
      self.adc13 = 0
      self.adc14 = 0
      self.adc15 = 0
      self.nano = geometry_msgs.msg.Wrench()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16H6d().pack(_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.nano.force.x, _x.nano.force.y, _x.nano.force.z, _x.nano.torque.x, _x.nano.torque.y, _x.nano.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nano is None:
        self.nano = geometry_msgs.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.nano.force.x, _x.nano.force.y, _x.nano.force.z, _x.nano.torque.x, _x.nano.torque.y, _x.nano.torque.z,) = _get_struct_16H6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16H6d().pack(_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.nano.force.x, _x.nano.force.y, _x.nano.force.z, _x.nano.torque.x, _x.nano.torque.y, _x.nano.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nano is None:
        self.nano = geometry_msgs.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5, _x.adc6, _x.adc7, _x.adc8, _x.adc9, _x.adc10, _x.adc11, _x.adc12, _x.adc13, _x.adc14, _x.adc15, _x.nano.force.x, _x.nano.force.y, _x.nano.force.z, _x.nano.torque.x, _x.nano.torque.y, _x.nano.torque.z,) = _get_struct_16H6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16H6d = None
def _get_struct_16H6d():
    global _struct_16H6d
    if _struct_16H6d is None:
        _struct_16H6d = struct.Struct("<16H6d")
    return _struct_16H6d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
