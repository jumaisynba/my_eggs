# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tactile_servo_msgs/ContsFeats.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import tactile_servo_msgs.msg

class ContsFeats(genpy.Message):
  _md5sum = "44c38b3dcf679267b4ec9aa49b84b60d"
  _type = "tactile_servo_msgs/ContsFeats"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header                                   # stamp
tactile_servo_msgs/OneContFeats[] control_features           # array of contacts

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: tactile_servo_msgs/OneContFeats
float64 centerpressure_x
float64 centerpressure_y
float64 contactForce
float64 centerContact_x
float64 centerContact_y
float64 contactOrientation
float64 zmp_x
float64 zmp_y
bool is_contact
int32 num_pixels_contact
float64 highest_force_cell
float64 real_total_force

"""
  __slots__ = ['header','control_features']
  _slot_types = ['std_msgs/Header','tactile_servo_msgs/OneContFeats[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,control_features

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ContsFeats, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control_features is None:
        self.control_features = []
    else:
      self.header = std_msgs.msg.Header()
      self.control_features = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.control_features)
      buff.write(_struct_I.pack(length))
      for val1 in self.control_features:
        _x = val1
        buff.write(_get_struct_8dBi2d().pack(_x.centerpressure_x, _x.centerpressure_y, _x.contactForce, _x.centerContact_x, _x.centerContact_y, _x.contactOrientation, _x.zmp_x, _x.zmp_y, _x.is_contact, _x.num_pixels_contact, _x.highest_force_cell, _x.real_total_force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control_features is None:
        self.control_features = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.control_features = []
      for i in range(0, length):
        val1 = tactile_servo_msgs.msg.OneContFeats()
        _x = val1
        start = end
        end += 85
        (_x.centerpressure_x, _x.centerpressure_y, _x.contactForce, _x.centerContact_x, _x.centerContact_y, _x.contactOrientation, _x.zmp_x, _x.zmp_y, _x.is_contact, _x.num_pixels_contact, _x.highest_force_cell, _x.real_total_force,) = _get_struct_8dBi2d().unpack(str[start:end])
        val1.is_contact = bool(val1.is_contact)
        self.control_features.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.control_features)
      buff.write(_struct_I.pack(length))
      for val1 in self.control_features:
        _x = val1
        buff.write(_get_struct_8dBi2d().pack(_x.centerpressure_x, _x.centerpressure_y, _x.contactForce, _x.centerContact_x, _x.centerContact_y, _x.contactOrientation, _x.zmp_x, _x.zmp_y, _x.is_contact, _x.num_pixels_contact, _x.highest_force_cell, _x.real_total_force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control_features is None:
        self.control_features = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.control_features = []
      for i in range(0, length):
        val1 = tactile_servo_msgs.msg.OneContFeats()
        _x = val1
        start = end
        end += 85
        (_x.centerpressure_x, _x.centerpressure_y, _x.contactForce, _x.centerContact_x, _x.centerContact_y, _x.contactOrientation, _x.zmp_x, _x.zmp_y, _x.is_contact, _x.num_pixels_contact, _x.highest_force_cell, _x.real_total_force,) = _get_struct_8dBi2d().unpack(str[start:end])
        val1.is_contact = bool(val1.is_contact)
        self.control_features.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8dBi2d = None
def _get_struct_8dBi2d():
    global _struct_8dBi2d
    if _struct_8dBi2d is None:
        _struct_8dBi2d = struct.Struct("<8dBi2d")
    return _struct_8dBi2d
