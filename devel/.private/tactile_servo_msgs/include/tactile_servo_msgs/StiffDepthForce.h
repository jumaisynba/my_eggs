// Generated by gencpp from file tactile_servo_msgs/StiffDepthForce.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_STIFFDEPTHFORCE_H
#define TACTILE_SERVO_MSGS_MESSAGE_STIFFDEPTHFORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct StiffDepthForce_
{
  typedef StiffDepthForce_<ContainerAllocator> Type;

  StiffDepthForce_()
    : header()
    , force()
    , depth()
    , stiffness_force()
    , image()
    , stiffness_image()
    , forces32()
    , depth32()
    , stiffness32()
    , index_in_array32()
    , ind_max_force32(0.0)
    , max_force32(0.0)
    , depth_at_max_force32(0.0)
    , stiffness_at_max_force32(0.0)
    , ind_min_force32(0.0)
    , min_force32(0.0)
    , depth_at_min_force32(0.0)
    , stiffness_at_min_force32(0.0)
    , ind_max_depth32(0.0)
    , max_depth32(0.0)
    , force_at_max_depth32(0.0)
    , stiffness_at_max_depth32(0.0)
    , ind_min_depth32(0.0)
    , min_depth32(0.0)
    , force_at_min_depth32(0.0)
    , stiffness_at_min_depth32(0.0)
    , ind_max_stiffness32(0.0)
    , max_stiffness32(0.0)
    , force_at_max_stiffness32(0.0)
    , depth_at_max_stiffness32(0.0)
    , ind_min_stiffness32(0.0)
    , min_stiffness32(0.0)
    , force_at_min_stiffness32(0.0)
    , depth_at_min_stiffness32(0.0)
    , total_force(0.0)
    , avg_force(0.0)
    , avg_depth(0.0)  {
    }
  StiffDepthForce_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , force(_alloc)
    , depth(_alloc)
    , stiffness_force(_alloc)
    , image(_alloc)
    , stiffness_image(_alloc)
    , forces32(_alloc)
    , depth32(_alloc)
    , stiffness32(_alloc)
    , index_in_array32(_alloc)
    , ind_max_force32(0.0)
    , max_force32(0.0)
    , depth_at_max_force32(0.0)
    , stiffness_at_max_force32(0.0)
    , ind_min_force32(0.0)
    , min_force32(0.0)
    , depth_at_min_force32(0.0)
    , stiffness_at_min_force32(0.0)
    , ind_max_depth32(0.0)
    , max_depth32(0.0)
    , force_at_max_depth32(0.0)
    , stiffness_at_max_depth32(0.0)
    , ind_min_depth32(0.0)
    , min_depth32(0.0)
    , force_at_min_depth32(0.0)
    , stiffness_at_min_depth32(0.0)
    , ind_max_stiffness32(0.0)
    , max_stiffness32(0.0)
    , force_at_max_stiffness32(0.0)
    , depth_at_max_stiffness32(0.0)
    , ind_min_stiffness32(0.0)
    , min_stiffness32(0.0)
    , force_at_min_stiffness32(0.0)
    , depth_at_min_stiffness32(0.0)
    , total_force(0.0)
    , avg_force(0.0)
    , avg_depth(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_type;
  _force_type force;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _depth_type;
  _depth_type depth;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _stiffness_force_type;
  _stiffness_force_type stiffness_force;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _image_type;
  _image_type image;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _stiffness_image_type;
  _stiffness_image_type stiffness_image;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _forces32_type;
  _forces32_type forces32;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _depth32_type;
  _depth32_type depth32;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _stiffness32_type;
  _stiffness32_type stiffness32;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _index_in_array32_type;
  _index_in_array32_type index_in_array32;

   typedef double _ind_max_force32_type;
  _ind_max_force32_type ind_max_force32;

   typedef double _max_force32_type;
  _max_force32_type max_force32;

   typedef double _depth_at_max_force32_type;
  _depth_at_max_force32_type depth_at_max_force32;

   typedef double _stiffness_at_max_force32_type;
  _stiffness_at_max_force32_type stiffness_at_max_force32;

   typedef double _ind_min_force32_type;
  _ind_min_force32_type ind_min_force32;

   typedef double _min_force32_type;
  _min_force32_type min_force32;

   typedef double _depth_at_min_force32_type;
  _depth_at_min_force32_type depth_at_min_force32;

   typedef double _stiffness_at_min_force32_type;
  _stiffness_at_min_force32_type stiffness_at_min_force32;

   typedef double _ind_max_depth32_type;
  _ind_max_depth32_type ind_max_depth32;

   typedef double _max_depth32_type;
  _max_depth32_type max_depth32;

   typedef double _force_at_max_depth32_type;
  _force_at_max_depth32_type force_at_max_depth32;

   typedef double _stiffness_at_max_depth32_type;
  _stiffness_at_max_depth32_type stiffness_at_max_depth32;

   typedef double _ind_min_depth32_type;
  _ind_min_depth32_type ind_min_depth32;

   typedef double _min_depth32_type;
  _min_depth32_type min_depth32;

   typedef double _force_at_min_depth32_type;
  _force_at_min_depth32_type force_at_min_depth32;

   typedef double _stiffness_at_min_depth32_type;
  _stiffness_at_min_depth32_type stiffness_at_min_depth32;

   typedef double _ind_max_stiffness32_type;
  _ind_max_stiffness32_type ind_max_stiffness32;

   typedef double _max_stiffness32_type;
  _max_stiffness32_type max_stiffness32;

   typedef double _force_at_max_stiffness32_type;
  _force_at_max_stiffness32_type force_at_max_stiffness32;

   typedef double _depth_at_max_stiffness32_type;
  _depth_at_max_stiffness32_type depth_at_max_stiffness32;

   typedef double _ind_min_stiffness32_type;
  _ind_min_stiffness32_type ind_min_stiffness32;

   typedef double _min_stiffness32_type;
  _min_stiffness32_type min_stiffness32;

   typedef double _force_at_min_stiffness32_type;
  _force_at_min_stiffness32_type force_at_min_stiffness32;

   typedef double _depth_at_min_stiffness32_type;
  _depth_at_min_stiffness32_type depth_at_min_stiffness32;

   typedef double _total_force_type;
  _total_force_type total_force;

   typedef double _avg_force_type;
  _avg_force_type avg_force;

   typedef double _avg_depth_type;
  _avg_depth_type avg_depth;





  typedef boost::shared_ptr< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> const> ConstPtr;

}; // struct StiffDepthForce_

typedef ::tactile_servo_msgs::StiffDepthForce_<std::allocator<void> > StiffDepthForce;

typedef boost::shared_ptr< ::tactile_servo_msgs::StiffDepthForce > StiffDepthForcePtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::StiffDepthForce const> StiffDepthForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.force == rhs.force &&
    lhs.depth == rhs.depth &&
    lhs.stiffness_force == rhs.stiffness_force &&
    lhs.image == rhs.image &&
    lhs.stiffness_image == rhs.stiffness_image &&
    lhs.forces32 == rhs.forces32 &&
    lhs.depth32 == rhs.depth32 &&
    lhs.stiffness32 == rhs.stiffness32 &&
    lhs.index_in_array32 == rhs.index_in_array32 &&
    lhs.ind_max_force32 == rhs.ind_max_force32 &&
    lhs.max_force32 == rhs.max_force32 &&
    lhs.depth_at_max_force32 == rhs.depth_at_max_force32 &&
    lhs.stiffness_at_max_force32 == rhs.stiffness_at_max_force32 &&
    lhs.ind_min_force32 == rhs.ind_min_force32 &&
    lhs.min_force32 == rhs.min_force32 &&
    lhs.depth_at_min_force32 == rhs.depth_at_min_force32 &&
    lhs.stiffness_at_min_force32 == rhs.stiffness_at_min_force32 &&
    lhs.ind_max_depth32 == rhs.ind_max_depth32 &&
    lhs.max_depth32 == rhs.max_depth32 &&
    lhs.force_at_max_depth32 == rhs.force_at_max_depth32 &&
    lhs.stiffness_at_max_depth32 == rhs.stiffness_at_max_depth32 &&
    lhs.ind_min_depth32 == rhs.ind_min_depth32 &&
    lhs.min_depth32 == rhs.min_depth32 &&
    lhs.force_at_min_depth32 == rhs.force_at_min_depth32 &&
    lhs.stiffness_at_min_depth32 == rhs.stiffness_at_min_depth32 &&
    lhs.ind_max_stiffness32 == rhs.ind_max_stiffness32 &&
    lhs.max_stiffness32 == rhs.max_stiffness32 &&
    lhs.force_at_max_stiffness32 == rhs.force_at_max_stiffness32 &&
    lhs.depth_at_max_stiffness32 == rhs.depth_at_max_stiffness32 &&
    lhs.ind_min_stiffness32 == rhs.ind_min_stiffness32 &&
    lhs.min_stiffness32 == rhs.min_stiffness32 &&
    lhs.force_at_min_stiffness32 == rhs.force_at_min_stiffness32 &&
    lhs.depth_at_min_stiffness32 == rhs.depth_at_min_stiffness32 &&
    lhs.total_force == rhs.total_force &&
    lhs.avg_force == rhs.avg_force &&
    lhs.avg_depth == rhs.avg_depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e64db6a34b90e4652b9e7e2cf58e65a";
  }

  static const char* value(const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e64db6a34b90e46ULL;
  static const uint64_t static_value2 = 0x52b9e7e2cf58e65aULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/StiffDepthForce";
  }

  static const char* value(const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message force penetration depth and stifness of the simulated sensor in Gazebo ODE\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"\n"
"float64[] force          # forces\n"
"float64[] depth          # penetrations\n"
"float64[] stiffness_force      # stiffness based on force (gazebo)\n"
"float64[] image          # sensor outputs\n"
"float64[] stiffness_image      # stiffness based on the tactile image. actual (gazebo) force is multyplied by sensitivity value\n"
"###\n"
"float64[] forces32\n"
"float64[] depth32\n"
"float64[] stiffness32\n"
"uint32[] index_in_array32\n"
"float64 ind_max_force32\n"
"float64 max_force32\n"
"float64 depth_at_max_force32\n"
"float64 stiffness_at_max_force32\n"
"float64 ind_min_force32\n"
"float64 min_force32\n"
"float64 depth_at_min_force32\n"
"float64 stiffness_at_min_force32\n"
"float64 ind_max_depth32\n"
"float64 max_depth32\n"
"float64 force_at_max_depth32\n"
"float64 stiffness_at_max_depth32\n"
"float64 ind_min_depth32\n"
"float64 min_depth32\n"
"float64 force_at_min_depth32\n"
"float64 stiffness_at_min_depth32\n"
"float64 ind_max_stiffness32\n"
"float64 max_stiffness32\n"
"float64 force_at_max_stiffness32\n"
"float64 depth_at_max_stiffness32\n"
"float64 ind_min_stiffness32\n"
"float64 min_stiffness32\n"
"float64 force_at_min_stiffness32\n"
"float64 depth_at_min_stiffness32\n"
"float64 total_force\n"
"float64 avg_force\n"
"float64 avg_depth\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.force);
      stream.next(m.depth);
      stream.next(m.stiffness_force);
      stream.next(m.image);
      stream.next(m.stiffness_image);
      stream.next(m.forces32);
      stream.next(m.depth32);
      stream.next(m.stiffness32);
      stream.next(m.index_in_array32);
      stream.next(m.ind_max_force32);
      stream.next(m.max_force32);
      stream.next(m.depth_at_max_force32);
      stream.next(m.stiffness_at_max_force32);
      stream.next(m.ind_min_force32);
      stream.next(m.min_force32);
      stream.next(m.depth_at_min_force32);
      stream.next(m.stiffness_at_min_force32);
      stream.next(m.ind_max_depth32);
      stream.next(m.max_depth32);
      stream.next(m.force_at_max_depth32);
      stream.next(m.stiffness_at_max_depth32);
      stream.next(m.ind_min_depth32);
      stream.next(m.min_depth32);
      stream.next(m.force_at_min_depth32);
      stream.next(m.stiffness_at_min_depth32);
      stream.next(m.ind_max_stiffness32);
      stream.next(m.max_stiffness32);
      stream.next(m.force_at_max_stiffness32);
      stream.next(m.depth_at_max_stiffness32);
      stream.next(m.ind_min_stiffness32);
      stream.next(m.min_stiffness32);
      stream.next(m.force_at_min_stiffness32);
      stream.next(m.depth_at_min_stiffness32);
      stream.next(m.total_force);
      stream.next(m.avg_force);
      stream.next(m.avg_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StiffDepthForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::StiffDepthForce_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "depth[]" << std::endl;
    for (size_t i = 0; i < v.depth.size(); ++i)
    {
      s << indent << "  depth[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.depth[i]);
    }
    s << indent << "stiffness_force[]" << std::endl;
    for (size_t i = 0; i < v.stiffness_force.size(); ++i)
    {
      s << indent << "  stiffness_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stiffness_force[i]);
    }
    s << indent << "image[]" << std::endl;
    for (size_t i = 0; i < v.image.size(); ++i)
    {
      s << indent << "  image[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.image[i]);
    }
    s << indent << "stiffness_image[]" << std::endl;
    for (size_t i = 0; i < v.stiffness_image.size(); ++i)
    {
      s << indent << "  stiffness_image[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stiffness_image[i]);
    }
    s << indent << "forces32[]" << std::endl;
    for (size_t i = 0; i < v.forces32.size(); ++i)
    {
      s << indent << "  forces32[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.forces32[i]);
    }
    s << indent << "depth32[]" << std::endl;
    for (size_t i = 0; i < v.depth32.size(); ++i)
    {
      s << indent << "  depth32[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.depth32[i]);
    }
    s << indent << "stiffness32[]" << std::endl;
    for (size_t i = 0; i < v.stiffness32.size(); ++i)
    {
      s << indent << "  stiffness32[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stiffness32[i]);
    }
    s << indent << "index_in_array32[]" << std::endl;
    for (size_t i = 0; i < v.index_in_array32.size(); ++i)
    {
      s << indent << "  index_in_array32[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.index_in_array32[i]);
    }
    s << indent << "ind_max_force32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_max_force32);
    s << indent << "max_force32: ";
    Printer<double>::stream(s, indent + "  ", v.max_force32);
    s << indent << "depth_at_max_force32: ";
    Printer<double>::stream(s, indent + "  ", v.depth_at_max_force32);
    s << indent << "stiffness_at_max_force32: ";
    Printer<double>::stream(s, indent + "  ", v.stiffness_at_max_force32);
    s << indent << "ind_min_force32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_min_force32);
    s << indent << "min_force32: ";
    Printer<double>::stream(s, indent + "  ", v.min_force32);
    s << indent << "depth_at_min_force32: ";
    Printer<double>::stream(s, indent + "  ", v.depth_at_min_force32);
    s << indent << "stiffness_at_min_force32: ";
    Printer<double>::stream(s, indent + "  ", v.stiffness_at_min_force32);
    s << indent << "ind_max_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_max_depth32);
    s << indent << "max_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.max_depth32);
    s << indent << "force_at_max_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.force_at_max_depth32);
    s << indent << "stiffness_at_max_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.stiffness_at_max_depth32);
    s << indent << "ind_min_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_min_depth32);
    s << indent << "min_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.min_depth32);
    s << indent << "force_at_min_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.force_at_min_depth32);
    s << indent << "stiffness_at_min_depth32: ";
    Printer<double>::stream(s, indent + "  ", v.stiffness_at_min_depth32);
    s << indent << "ind_max_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_max_stiffness32);
    s << indent << "max_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.max_stiffness32);
    s << indent << "force_at_max_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.force_at_max_stiffness32);
    s << indent << "depth_at_max_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.depth_at_max_stiffness32);
    s << indent << "ind_min_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.ind_min_stiffness32);
    s << indent << "min_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.min_stiffness32);
    s << indent << "force_at_min_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.force_at_min_stiffness32);
    s << indent << "depth_at_min_stiffness32: ";
    Printer<double>::stream(s, indent + "  ", v.depth_at_min_stiffness32);
    s << indent << "total_force: ";
    Printer<double>::stream(s, indent + "  ", v.total_force);
    s << indent << "avg_force: ";
    Printer<double>::stream(s, indent + "  ", v.avg_force);
    s << indent << "avg_depth: ";
    Printer<double>::stream(s, indent + "  ", v.avg_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_STIFFDEPTHFORCE_H
