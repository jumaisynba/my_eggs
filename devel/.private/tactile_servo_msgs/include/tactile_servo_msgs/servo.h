// Generated by gencpp from file tactile_servo_msgs/servo.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_SERVO_H
#define TACTILE_SERVO_MSGS_MESSAGE_SERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct servo_
{
  typedef servo_<ContainerAllocator> Type;

  servo_()
    : header()
    , desired_orientation(0.0)
    , actual_orientation(0.0)
    , desired_force(0.0)
    , actual_force(0.0)
    , desired_pressure(0.0)
    , actual_pressure(0.0)
    , desired_offset_x(0.0)
    , actual_offset_x(0.0)
    , desired_offset_y(0.0)
    , actual_offset_y(0.0)
    , actual_pressure2(0.0)  {
    }
  servo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , desired_orientation(0.0)
    , actual_orientation(0.0)
    , desired_force(0.0)
    , actual_force(0.0)
    , desired_pressure(0.0)
    , actual_pressure(0.0)
    , desired_offset_x(0.0)
    , actual_offset_x(0.0)
    , desired_offset_y(0.0)
    , actual_offset_y(0.0)
    , actual_pressure2(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _desired_orientation_type;
  _desired_orientation_type desired_orientation;

   typedef double _actual_orientation_type;
  _actual_orientation_type actual_orientation;

   typedef double _desired_force_type;
  _desired_force_type desired_force;

   typedef double _actual_force_type;
  _actual_force_type actual_force;

   typedef double _desired_pressure_type;
  _desired_pressure_type desired_pressure;

   typedef double _actual_pressure_type;
  _actual_pressure_type actual_pressure;

   typedef double _desired_offset_x_type;
  _desired_offset_x_type desired_offset_x;

   typedef double _actual_offset_x_type;
  _actual_offset_x_type actual_offset_x;

   typedef double _desired_offset_y_type;
  _desired_offset_y_type desired_offset_y;

   typedef double _actual_offset_y_type;
  _actual_offset_y_type actual_offset_y;

   typedef double _actual_pressure2_type;
  _actual_pressure2_type actual_pressure2;





  typedef boost::shared_ptr< ::tactile_servo_msgs::servo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::servo_<ContainerAllocator> const> ConstPtr;

}; // struct servo_

typedef ::tactile_servo_msgs::servo_<std::allocator<void> > servo;

typedef boost::shared_ptr< ::tactile_servo_msgs::servo > servoPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::servo const> servoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::servo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::servo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::servo_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::servo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.desired_orientation == rhs.desired_orientation &&
    lhs.actual_orientation == rhs.actual_orientation &&
    lhs.desired_force == rhs.desired_force &&
    lhs.actual_force == rhs.actual_force &&
    lhs.desired_pressure == rhs.desired_pressure &&
    lhs.actual_pressure == rhs.actual_pressure &&
    lhs.desired_offset_x == rhs.desired_offset_x &&
    lhs.actual_offset_x == rhs.actual_offset_x &&
    lhs.desired_offset_y == rhs.desired_offset_y &&
    lhs.actual_offset_y == rhs.actual_offset_y &&
    lhs.actual_pressure2 == rhs.actual_pressure2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::servo_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::servo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::servo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::servo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::servo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::servo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41a31713cf8f35c335c8794979f147d5";
  }

  static const char* value(const ::tactile_servo_msgs::servo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41a31713cf8f35c3ULL;
  static const uint64_t static_value2 = 0x35c8794979f147d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/servo";
  }

  static const char* value(const ::tactile_servo_msgs::servo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 desired_orientation \n"
"float64 actual_orientation\n"
"float64 desired_force \n"
"float64 actual_force\n"
"float64 desired_pressure\n"
"float64 actual_pressure\n"
"float64 desired_offset_x\n"
"float64 actual_offset_x\n"
"float64 desired_offset_y\n"
"float64 actual_offset_y\n"
"float64 actual_pressure2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::servo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::servo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.desired_orientation);
      stream.next(m.actual_orientation);
      stream.next(m.desired_force);
      stream.next(m.actual_force);
      stream.next(m.desired_pressure);
      stream.next(m.actual_pressure);
      stream.next(m.desired_offset_x);
      stream.next(m.actual_offset_x);
      stream.next(m.desired_offset_y);
      stream.next(m.actual_offset_y);
      stream.next(m.actual_pressure2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::servo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::servo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "desired_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.desired_orientation);
    s << indent << "actual_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.actual_orientation);
    s << indent << "desired_force: ";
    Printer<double>::stream(s, indent + "  ", v.desired_force);
    s << indent << "actual_force: ";
    Printer<double>::stream(s, indent + "  ", v.actual_force);
    s << indent << "desired_pressure: ";
    Printer<double>::stream(s, indent + "  ", v.desired_pressure);
    s << indent << "actual_pressure: ";
    Printer<double>::stream(s, indent + "  ", v.actual_pressure);
    s << indent << "desired_offset_x: ";
    Printer<double>::stream(s, indent + "  ", v.desired_offset_x);
    s << indent << "actual_offset_x: ";
    Printer<double>::stream(s, indent + "  ", v.actual_offset_x);
    s << indent << "desired_offset_y: ";
    Printer<double>::stream(s, indent + "  ", v.desired_offset_y);
    s << indent << "actual_offset_y: ";
    Printer<double>::stream(s, indent + "  ", v.actual_offset_y);
    s << indent << "actual_pressure2: ";
    Printer<double>::stream(s, indent + "  ", v.actual_pressure2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_SERVO_H
