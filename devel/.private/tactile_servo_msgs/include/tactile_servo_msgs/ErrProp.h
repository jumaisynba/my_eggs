// Generated by gencpp from file tactile_servo_msgs/ErrProp.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_ERRPROP_H
#define TACTILE_SERVO_MSGS_MESSAGE_ERRPROP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct ErrProp_
{
  typedef ErrProp_<ContainerAllocator> Type;

  ErrProp_()
    : header()
    , centerpressure_x(0.0)
    , centerpressure_y(0.0)
    , contactForce(0.0)
    , centerContact_x(0.0)
    , centerContact_y(0.0)
    , contactOrientation(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)  {
    }
  ErrProp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , centerpressure_x(0.0)
    , centerpressure_y(0.0)
    , contactForce(0.0)
    , centerContact_x(0.0)
    , centerContact_y(0.0)
    , contactOrientation(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _centerpressure_x_type;
  _centerpressure_x_type centerpressure_x;

   typedef double _centerpressure_y_type;
  _centerpressure_y_type centerpressure_y;

   typedef double _contactForce_type;
  _contactForce_type contactForce;

   typedef double _centerContact_x_type;
  _centerContact_x_type centerContact_x;

   typedef double _centerContact_y_type;
  _centerContact_y_type centerContact_y;

   typedef double _contactOrientation_type;
  _contactOrientation_type contactOrientation;

   typedef double _zmp_x_type;
  _zmp_x_type zmp_x;

   typedef double _zmp_y_type;
  _zmp_y_type zmp_y;





  typedef boost::shared_ptr< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> const> ConstPtr;

}; // struct ErrProp_

typedef ::tactile_servo_msgs::ErrProp_<std::allocator<void> > ErrProp;

typedef boost::shared_ptr< ::tactile_servo_msgs::ErrProp > ErrPropPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::ErrProp const> ErrPropConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::ErrProp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::ErrProp_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::ErrProp_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.centerpressure_x == rhs.centerpressure_x &&
    lhs.centerpressure_y == rhs.centerpressure_y &&
    lhs.contactForce == rhs.contactForce &&
    lhs.centerContact_x == rhs.centerContact_x &&
    lhs.centerContact_y == rhs.centerContact_y &&
    lhs.contactOrientation == rhs.contactOrientation &&
    lhs.zmp_x == rhs.zmp_x &&
    lhs.zmp_y == rhs.zmp_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::ErrProp_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::ErrProp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e6507bf7c9706a62d8c8389f7cfcdbc";
  }

  static const char* value(const ::tactile_servo_msgs::ErrProp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e6507bf7c9706a6ULL;
  static const uint64_t static_value2 = 0x2d8c8389f7cfcdbcULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/ErrProp";
  }

  static const char* value(const ::tactile_servo_msgs::ErrProp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 centerpressure_x\n"
"float64 centerpressure_y\n"
"float64 contactForce\n"
"float64 centerContact_x\n"
"float64 centerContact_y\n"
"float64 contactOrientation\n"
"float64 zmp_x\n"
"float64 zmp_y\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::ErrProp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.centerpressure_x);
      stream.next(m.centerpressure_y);
      stream.next(m.contactForce);
      stream.next(m.centerContact_x);
      stream.next(m.centerContact_y);
      stream.next(m.contactOrientation);
      stream.next(m.zmp_x);
      stream.next(m.zmp_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrProp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::ErrProp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::ErrProp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "centerpressure_x: ";
    Printer<double>::stream(s, indent + "  ", v.centerpressure_x);
    s << indent << "centerpressure_y: ";
    Printer<double>::stream(s, indent + "  ", v.centerpressure_y);
    s << indent << "contactForce: ";
    Printer<double>::stream(s, indent + "  ", v.contactForce);
    s << indent << "centerContact_x: ";
    Printer<double>::stream(s, indent + "  ", v.centerContact_x);
    s << indent << "centerContact_y: ";
    Printer<double>::stream(s, indent + "  ", v.centerContact_y);
    s << indent << "contactOrientation: ";
    Printer<double>::stream(s, indent + "  ", v.contactOrientation);
    s << indent << "zmp_x: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_x);
    s << indent << "zmp_y: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_ERRPROP_H
