// Generated by gencpp from file tactile_servo_msgs/servo_hand.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_SERVO_HAND_H
#define TACTILE_SERVO_MSGS_MESSAGE_SERVO_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct servo_hand_
{
  typedef servo_hand_<ContainerAllocator> Type;

  servo_hand_()
    : header()
    , desired_orientation(0.0)
    , actual_orientation(0.0)
    , error_orientation(0.0)
    , hand_orientation(0.0)
    , obj_real_orientation(0.0)  {
    }
  servo_hand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , desired_orientation(0.0)
    , actual_orientation(0.0)
    , error_orientation(0.0)
    , hand_orientation(0.0)
    , obj_real_orientation(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _desired_orientation_type;
  _desired_orientation_type desired_orientation;

   typedef double _actual_orientation_type;
  _actual_orientation_type actual_orientation;

   typedef double _error_orientation_type;
  _error_orientation_type error_orientation;

   typedef double _hand_orientation_type;
  _hand_orientation_type hand_orientation;

   typedef double _obj_real_orientation_type;
  _obj_real_orientation_type obj_real_orientation;





  typedef boost::shared_ptr< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> const> ConstPtr;

}; // struct servo_hand_

typedef ::tactile_servo_msgs::servo_hand_<std::allocator<void> > servo_hand;

typedef boost::shared_ptr< ::tactile_servo_msgs::servo_hand > servo_handPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::servo_hand const> servo_handConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::servo_hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::servo_hand_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::servo_hand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.desired_orientation == rhs.desired_orientation &&
    lhs.actual_orientation == rhs.actual_orientation &&
    lhs.error_orientation == rhs.error_orientation &&
    lhs.hand_orientation == rhs.hand_orientation &&
    lhs.obj_real_orientation == rhs.obj_real_orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::servo_hand_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::servo_hand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f82b6c4144eb7bb105c70c012b82576a";
  }

  static const char* value(const ::tactile_servo_msgs::servo_hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf82b6c4144eb7bb1ULL;
  static const uint64_t static_value2 = 0x05c70c012b82576aULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/servo_hand";
  }

  static const char* value(const ::tactile_servo_msgs::servo_hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 desired_orientation\n"
"float64 actual_orientation\n"
"float64 error_orientation\n"
"float64 hand_orientation\n"
"float64 obj_real_orientation\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::servo_hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.desired_orientation);
      stream.next(m.actual_orientation);
      stream.next(m.error_orientation);
      stream.next(m.hand_orientation);
      stream.next(m.obj_real_orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::servo_hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::servo_hand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "desired_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.desired_orientation);
    s << indent << "actual_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.actual_orientation);
    s << indent << "error_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.error_orientation);
    s << indent << "hand_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.hand_orientation);
    s << indent << "obj_real_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.obj_real_orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_SERVO_HAND_H
