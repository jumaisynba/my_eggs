// Generated by gencpp from file tactile_servo_msgs/OneContFeats.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_ONECONTFEATS_H
#define TACTILE_SERVO_MSGS_MESSAGE_ONECONTFEATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct OneContFeats_
{
  typedef OneContFeats_<ContainerAllocator> Type;

  OneContFeats_()
    : centerpressure_x(0.0)
    , centerpressure_y(0.0)
    , contactForce(0.0)
    , centerContact_x(0.0)
    , centerContact_y(0.0)
    , contactOrientation(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)
    , is_contact(false)
    , num_pixels_contact(0)
    , highest_force_cell(0.0)
    , real_total_force(0.0)  {
    }
  OneContFeats_(const ContainerAllocator& _alloc)
    : centerpressure_x(0.0)
    , centerpressure_y(0.0)
    , contactForce(0.0)
    , centerContact_x(0.0)
    , centerContact_y(0.0)
    , contactOrientation(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)
    , is_contact(false)
    , num_pixels_contact(0)
    , highest_force_cell(0.0)
    , real_total_force(0.0)  {
  (void)_alloc;
    }



   typedef double _centerpressure_x_type;
  _centerpressure_x_type centerpressure_x;

   typedef double _centerpressure_y_type;
  _centerpressure_y_type centerpressure_y;

   typedef double _contactForce_type;
  _contactForce_type contactForce;

   typedef double _centerContact_x_type;
  _centerContact_x_type centerContact_x;

   typedef double _centerContact_y_type;
  _centerContact_y_type centerContact_y;

   typedef double _contactOrientation_type;
  _contactOrientation_type contactOrientation;

   typedef double _zmp_x_type;
  _zmp_x_type zmp_x;

   typedef double _zmp_y_type;
  _zmp_y_type zmp_y;

   typedef uint8_t _is_contact_type;
  _is_contact_type is_contact;

   typedef int32_t _num_pixels_contact_type;
  _num_pixels_contact_type num_pixels_contact;

   typedef double _highest_force_cell_type;
  _highest_force_cell_type highest_force_cell;

   typedef double _real_total_force_type;
  _real_total_force_type real_total_force;





  typedef boost::shared_ptr< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> const> ConstPtr;

}; // struct OneContFeats_

typedef ::tactile_servo_msgs::OneContFeats_<std::allocator<void> > OneContFeats;

typedef boost::shared_ptr< ::tactile_servo_msgs::OneContFeats > OneContFeatsPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::OneContFeats const> OneContFeatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator2> & rhs)
{
  return lhs.centerpressure_x == rhs.centerpressure_x &&
    lhs.centerpressure_y == rhs.centerpressure_y &&
    lhs.contactForce == rhs.contactForce &&
    lhs.centerContact_x == rhs.centerContact_x &&
    lhs.centerContact_y == rhs.centerContact_y &&
    lhs.contactOrientation == rhs.contactOrientation &&
    lhs.zmp_x == rhs.zmp_x &&
    lhs.zmp_y == rhs.zmp_y &&
    lhs.is_contact == rhs.is_contact &&
    lhs.num_pixels_contact == rhs.num_pixels_contact &&
    lhs.highest_force_cell == rhs.highest_force_cell &&
    lhs.real_total_force == rhs.real_total_force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fdece2a38b99c6197914e4ea70b8fffb";
  }

  static const char* value(const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfdece2a38b99c619ULL;
  static const uint64_t static_value2 = 0x7914e4ea70b8fffbULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/OneContFeats";
  }

  static const char* value(const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 centerpressure_x\n"
"float64 centerpressure_y\n"
"float64 contactForce\n"
"float64 centerContact_x\n"
"float64 centerContact_y\n"
"float64 contactOrientation\n"
"float64 zmp_x\n"
"float64 zmp_y\n"
"bool is_contact\n"
"int32 num_pixels_contact\n"
"float64 highest_force_cell\n"
"float64 real_total_force\n"
"\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerpressure_x);
      stream.next(m.centerpressure_y);
      stream.next(m.contactForce);
      stream.next(m.centerContact_x);
      stream.next(m.centerContact_y);
      stream.next(m.contactOrientation);
      stream.next(m.zmp_x);
      stream.next(m.zmp_y);
      stream.next(m.is_contact);
      stream.next(m.num_pixels_contact);
      stream.next(m.highest_force_cell);
      stream.next(m.real_total_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OneContFeats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::OneContFeats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::OneContFeats_<ContainerAllocator>& v)
  {
    s << indent << "centerpressure_x: ";
    Printer<double>::stream(s, indent + "  ", v.centerpressure_x);
    s << indent << "centerpressure_y: ";
    Printer<double>::stream(s, indent + "  ", v.centerpressure_y);
    s << indent << "contactForce: ";
    Printer<double>::stream(s, indent + "  ", v.contactForce);
    s << indent << "centerContact_x: ";
    Printer<double>::stream(s, indent + "  ", v.centerContact_x);
    s << indent << "centerContact_y: ";
    Printer<double>::stream(s, indent + "  ", v.centerContact_y);
    s << indent << "contactOrientation: ";
    Printer<double>::stream(s, indent + "  ", v.contactOrientation);
    s << indent << "zmp_x: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_x);
    s << indent << "zmp_y: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_y);
    s << indent << "is_contact: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_contact);
    s << indent << "num_pixels_contact: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_pixels_contact);
    s << indent << "highest_force_cell: ";
    Printer<double>::stream(s, indent + "  ", v.highest_force_cell);
    s << indent << "real_total_force: ";
    Printer<double>::stream(s, indent + "  ", v.real_total_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_ONECONTFEATS_H
