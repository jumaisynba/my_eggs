// Generated by gencpp from file tactile_servo_msgs/CalibWeissNano.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_CALIBWEISSNANO_H
#define TACTILE_SERVO_MSGS_MESSAGE_CALIBWEISSNANO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct CalibWeissNano_
{
  typedef CalibWeissNano_<ContainerAllocator> Type;

  CalibWeissNano_()
    : header()
    , contactForce(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)
    , cop_x(0.0)
    , cop_y(0.0)
    , orient_z(0.0)
    , coc_x(0.0)
    , coc_y(0.0)
    , nano()  {
    }
  CalibWeissNano_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , contactForce(0.0)
    , zmp_x(0.0)
    , zmp_y(0.0)
    , cop_x(0.0)
    , cop_y(0.0)
    , orient_z(0.0)
    , coc_x(0.0)
    , coc_y(0.0)
    , nano(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _contactForce_type;
  _contactForce_type contactForce;

   typedef double _zmp_x_type;
  _zmp_x_type zmp_x;

   typedef double _zmp_y_type;
  _zmp_y_type zmp_y;

   typedef double _cop_x_type;
  _cop_x_type cop_x;

   typedef double _cop_y_type;
  _cop_y_type cop_y;

   typedef double _orient_z_type;
  _orient_z_type orient_z;

   typedef double _coc_x_type;
  _coc_x_type coc_x;

   typedef double _coc_y_type;
  _coc_y_type coc_y;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _nano_type;
  _nano_type nano;





  typedef boost::shared_ptr< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> const> ConstPtr;

}; // struct CalibWeissNano_

typedef ::tactile_servo_msgs::CalibWeissNano_<std::allocator<void> > CalibWeissNano;

typedef boost::shared_ptr< ::tactile_servo_msgs::CalibWeissNano > CalibWeissNanoPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::CalibWeissNano const> CalibWeissNanoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.contactForce == rhs.contactForce &&
    lhs.zmp_x == rhs.zmp_x &&
    lhs.zmp_y == rhs.zmp_y &&
    lhs.cop_x == rhs.cop_x &&
    lhs.cop_y == rhs.cop_y &&
    lhs.orient_z == rhs.orient_z &&
    lhs.coc_x == rhs.coc_x &&
    lhs.coc_y == rhs.coc_y &&
    lhs.nano == rhs.nano;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "427d9e81487d12d71f0577b073eb48de";
  }

  static const char* value(const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x427d9e81487d12d7ULL;
  static const uint64_t static_value2 = 0x1f0577b073eb48deULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/CalibWeissNano";
  }

  static const char* value(const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 contactForce\n"
"float64 zmp_x\n"
"float64 zmp_y\n"
"float64 cop_x\n"
"float64 cop_y\n"
"float64 orient_z\n"
"float64 coc_x\n"
"float64 coc_y\n"
"geometry_msgs/Wrench nano\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.contactForce);
      stream.next(m.zmp_x);
      stream.next(m.zmp_y);
      stream.next(m.cop_x);
      stream.next(m.cop_y);
      stream.next(m.orient_z);
      stream.next(m.coc_x);
      stream.next(m.coc_y);
      stream.next(m.nano);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibWeissNano_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::CalibWeissNano_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "contactForce: ";
    Printer<double>::stream(s, indent + "  ", v.contactForce);
    s << indent << "zmp_x: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_x);
    s << indent << "zmp_y: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_y);
    s << indent << "cop_x: ";
    Printer<double>::stream(s, indent + "  ", v.cop_x);
    s << indent << "cop_y: ";
    Printer<double>::stream(s, indent + "  ", v.cop_y);
    s << indent << "orient_z: ";
    Printer<double>::stream(s, indent + "  ", v.orient_z);
    s << indent << "coc_x: ";
    Printer<double>::stream(s, indent + "  ", v.coc_x);
    s << indent << "coc_y: ";
    Printer<double>::stream(s, indent + "  ", v.coc_y);
    s << indent << "nano: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.nano);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_CALIBWEISSNANO_H
