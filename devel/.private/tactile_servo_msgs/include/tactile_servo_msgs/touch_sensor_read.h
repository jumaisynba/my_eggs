// Generated by gencpp from file tactile_servo_msgs/touch_sensor_read.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_MSGS_MESSAGE_TOUCH_SENSOR_READ_H
#define TACTILE_SERVO_MSGS_MESSAGE_TOUCH_SENSOR_READ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tactile_servo_msgs
{
template <class ContainerAllocator>
struct touch_sensor_read_
{
  typedef touch_sensor_read_<ContainerAllocator> Type;

  touch_sensor_read_()
    : header()
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , a4(0.0)
    , a5(0.0)
    , a6(0.0)
    , a7(0.0)
    , a8(0.0)
    , a9(0.0)
    , a10(0.0)
    , a11(0.0)
    , a12(0.0)
    , a13(0.0)
    , a14(0.0)
    , a15(0.0)  {
    }
  touch_sensor_read_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , a4(0.0)
    , a5(0.0)
    , a6(0.0)
    , a7(0.0)
    , a8(0.0)
    , a9(0.0)
    , a10(0.0)
    , a11(0.0)
    , a12(0.0)
    , a13(0.0)
    , a14(0.0)
    , a15(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _a0_type;
  _a0_type a0;

   typedef float _a1_type;
  _a1_type a1;

   typedef float _a2_type;
  _a2_type a2;

   typedef float _a3_type;
  _a3_type a3;

   typedef float _a4_type;
  _a4_type a4;

   typedef float _a5_type;
  _a5_type a5;

   typedef float _a6_type;
  _a6_type a6;

   typedef float _a7_type;
  _a7_type a7;

   typedef float _a8_type;
  _a8_type a8;

   typedef float _a9_type;
  _a9_type a9;

   typedef float _a10_type;
  _a10_type a10;

   typedef float _a11_type;
  _a11_type a11;

   typedef float _a12_type;
  _a12_type a12;

   typedef float _a13_type;
  _a13_type a13;

   typedef float _a14_type;
  _a14_type a14;

   typedef float _a15_type;
  _a15_type a15;





  typedef boost::shared_ptr< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> const> ConstPtr;

}; // struct touch_sensor_read_

typedef ::tactile_servo_msgs::touch_sensor_read_<std::allocator<void> > touch_sensor_read;

typedef boost::shared_ptr< ::tactile_servo_msgs::touch_sensor_read > touch_sensor_readPtr;
typedef boost::shared_ptr< ::tactile_servo_msgs::touch_sensor_read const> touch_sensor_readConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.a0 == rhs.a0 &&
    lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3 &&
    lhs.a4 == rhs.a4 &&
    lhs.a5 == rhs.a5 &&
    lhs.a6 == rhs.a6 &&
    lhs.a7 == rhs.a7 &&
    lhs.a8 == rhs.a8 &&
    lhs.a9 == rhs.a9 &&
    lhs.a10 == rhs.a10 &&
    lhs.a11 == rhs.a11 &&
    lhs.a12 == rhs.a12 &&
    lhs.a13 == rhs.a13 &&
    lhs.a14 == rhs.a14 &&
    lhs.a15 == rhs.a15;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator1> & lhs, const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tactile_servo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4df8b4ab4ecaf13d960bd76650e851a5";
  }

  static const char* value(const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4df8b4ab4ecaf13dULL;
  static const uint64_t static_value2 = 0x960bd76650e851a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_msgs/touch_sensor_read";
  }

  static const char* value(const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Custome Analog input message\n"
"Header header\n"
"float32 a0\n"
"float32 a1\n"
"float32 a2\n"
"float32 a3\n"
"float32 a4\n"
"float32 a5\n"
"float32 a6\n"
"float32 a7\n"
"float32 a8\n"
"float32 a9\n"
"float32 a10\n"
"float32 a11\n"
"float32 a12\n"
"float32 a13\n"
"float32 a14\n"
"float32 a15\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.a0);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.a4);
      stream.next(m.a5);
      stream.next(m.a6);
      stream.next(m.a7);
      stream.next(m.a8);
      stream.next(m.a9);
      stream.next(m.a10);
      stream.next(m.a11);
      stream.next(m.a12);
      stream.next(m.a13);
      stream.next(m.a14);
      stream.next(m.a15);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct touch_sensor_read_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_msgs::touch_sensor_read_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "a0: ";
    Printer<float>::stream(s, indent + "  ", v.a0);
    s << indent << "a1: ";
    Printer<float>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<float>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<float>::stream(s, indent + "  ", v.a3);
    s << indent << "a4: ";
    Printer<float>::stream(s, indent + "  ", v.a4);
    s << indent << "a5: ";
    Printer<float>::stream(s, indent + "  ", v.a5);
    s << indent << "a6: ";
    Printer<float>::stream(s, indent + "  ", v.a6);
    s << indent << "a7: ";
    Printer<float>::stream(s, indent + "  ", v.a7);
    s << indent << "a8: ";
    Printer<float>::stream(s, indent + "  ", v.a8);
    s << indent << "a9: ";
    Printer<float>::stream(s, indent + "  ", v.a9);
    s << indent << "a10: ";
    Printer<float>::stream(s, indent + "  ", v.a10);
    s << indent << "a11: ";
    Printer<float>::stream(s, indent + "  ", v.a11);
    s << indent << "a12: ";
    Printer<float>::stream(s, indent + "  ", v.a12);
    s << indent << "a13: ";
    Printer<float>::stream(s, indent + "  ", v.a13);
    s << indent << "a14: ";
    Printer<float>::stream(s, indent + "  ", v.a14);
    s << indent << "a15: ";
    Printer<float>::stream(s, indent + "  ", v.a15);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_MSGS_MESSAGE_TOUCH_SENSOR_READ_H
